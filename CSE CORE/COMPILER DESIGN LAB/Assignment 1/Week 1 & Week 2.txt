Week 1 -

1) Write a C program to check if a user given string is a valid identifier or not?

Code -

#include <stdio.h>
#include <string.h>

void checkidentifier(char inputt[])
{
    if (inputt[0] == '_' || (inputt[0] >= 'A' && inputt[0] <= 'Z') || (inputt[0] >= 'a' && inputt[0] <= 'z'))
    {
        printf("Valid Identifier");
    }
    else
    {
        printf("Invalid Identifier");
    }
}

int main()
{
    char inputt[100];
    printf("Insert a string to check - ");
    gets(inputt);
    checkidentifier(inputt);
}

Output - 

Insert a string to check - _ABC
Valid Identifier

2) Write a C program to check if a user given C program statement is a valid Comment or not?

Code - 

#include <stdio.h>
#include <string.h>

void checkcomment(char inputt[])
{
    if (inputt[0] == '/')
    {
        if (inputt[1] == '/' || (inputt[1] == '*' && inputt[strlen(inputt) - 1] == '/' && inputt[strlen(inputt) - 2] == '*'))
        {
            printf("This is a Comment");
        }
        else
        {
            printf("This is not a Comment");
        }
    }
    else
    {
        printf("This is not a Comment");
    }
}

int main()
{
    char inputt[100];
    printf("Insert a string to check - ");
    gets(inputt);
    checkcomment(inputt);
    return 0;
}

Output - 

Insert a string to check - // comment
This is a comment

Week 2 - 

3) Write a C program to read a program written in a file and remove all comments. After removing all comments, rewrite the program in a separate file.

code - 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void removeComments(FILE *sourceFile, FILE *outputFile) {
    int currentChar, nextChar;
    while ((currentChar = fgetc(sourceFile)) != EOF) {
        if (currentChar == '/') {
            nextChar = fgetc(sourceFile);
            if (nextChar == '/') {
                while ((currentChar = fgetc(sourceFile)) != '\n' && currentChar != EOF);
            } else if (nextChar == '*') {
                do {
                    while ((currentChar = fgetc(sourceFile)) != '*')
                        if (currentChar == EOF) break;
                    nextChar = fgetc(sourceFile);
                } while (nextChar != '/' && currentChar != EOF);
            } else {
                fputc(currentChar, outputFile);
                fputc(nextChar, outputFile);
            }
        } else {
            fputc(currentChar, outputFile);
        }
    }
}
int main() {
    FILE *sourceFile, *outputFile;
    char sourceFileName[100], outputFileName[100];

    printf("Enter the name of the source code file: ");
    scanf("%s", sourceFileName);

    sourceFile = fopen(sourceFileName, "r");

    if (sourceFile == NULL) {
        printf("Error opening source file.\n");
        return 1;
    }

    printf("Enter the name of the output file: ");
    scanf("%s", outputFileName);

    outputFile = fopen(outputFileName, "w");

    if (outputFile == NULL) {
        printf("Error opening output file.\n");
        fclose(sourceFile);
        return 1;
    }

    removeComments(sourceFile, outputFile);

    printf("Comments removed successfully. Check the file %s\n", outputFileName);

    fclose(sourceFile);
    fclose(outputFile);

    return 0;
}

Output - 

Enter the name of the source code file: file1.txt
Enter the name of the output file: file2.txt
Comments removed successfully. Check the file file2.txt

4) Write a C program to convert an infix statement into a postfix statement.

code -

